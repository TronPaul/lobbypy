[app:main]
use = egg:lobbypy

pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes =
    pyramid_debugtoolbar
    pyramid_tm

sqlalchemy.url = sqlite:///%(here)s/lobbypy.sqlite

openid.success_callback = lobbypy.lib.auth:openid
steam_api.key_file = %(here)s/steam_api_key.secret
authentication_policy.key_file = %(here)s/authentication_policy_key.secret
session.type = file
session.data_dir = %(here)s/data/sessions/data
session.lock_dir = %(here)s/data/sessions/lock
session.cookie_on_exception = true
session.key_file = %(here)s/session_key.secret

[server:main]
use = egg:gunicorn#main
host = 0.0.0.0
port = 6543
workers = 4
worker_class = socketio.sgunicorn.GeventSocketIOWorker

# Begin logging configuration

[loggers]
keys = root, lobbypy, sqlalchemy

[handlers]
keys = console, filelog

[handler_filelog]
class = logging.handlers.RotatingFileHandler
args = ('%(here)s/lobbypy-dev.log',)
kwargs = (backupCount=5,)
leven = INFO
formatter = generic

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console, filelog

[logger_lobbypy]
level = DEBUG
handlers =
qualname = lobbypy

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
